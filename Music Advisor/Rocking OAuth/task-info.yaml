type: edu
custom_name: stage2
files:
- name: src/advisor/Main.java
  visible: true
  text: |
    package advisor;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            Main app = new Main();

            for (; ; ) {
                String userRequest = scanner.nextLine();
                String chosenPlaylist = null;
                if (userRequest.contains("playlists")) {
                    chosenPlaylist = userRequest.replace("playlists", "").strip();
                    userRequest = "playlists";
                }

                switch (userRequest) {
                    case "featured": {
                        app.featured();
                        break;
                    }
                    case "new": {
                        app.newReleases();
                        break;
                    }
                    case "categories": {
                        app.categories();
                        break;
                    }
                    case "playlists": {
                        app.playList(chosenPlaylist);
                        break;
                    }
                    case "exit": {
                        System.out.println("---GOODBYE!---");
                        System.exit(0);
                    }
                    default: {
                        System.out.println("Nieznana komenda");
                    }
                }

            }
        }



        public void newReleases() {
            System.out.println("---NEW RELEASES---");
            System.out.println("Mountains [Sia, Diplo, Labrinth]");
            System.out.println("Runaway [Lil Peep]");
            System.out.println("The Greatest Show [Panic! At The Disco]");
            System.out.println("All Out Life [Slipknot]");
        }

        public void featured() {
            System.out.println("---FEATURED---");
            System.out.println("Mellow Morning");
            System.out.println("Wake Up and Smell the Coffee");
            System.out.println("Monday Motivation");
            System.out.println("Songs to Sing in the Shower");

        }

        public void categories() {
            System.out.println("---CATEGORIES---");
            System.out.println("Top Lists");
            System.out.println("Pop");
            System.out.println("Pop");
            System.out.println("Mood");
            System.out.println("Latin");

        }

        public void playList(String chosenPlaylist) {
            switch (chosenPlaylist) {
                case "Top Lists":{

                    break;
                }
                case "Pop":{

                    break;
                }
                case "Mood":{
                    playMoodPlaylist();
                    break;
                }
                case "Latin":{

                    break;
                }
            }
            playMoodPlaylist();

        }

        private void playMoodPlaylist() {
            System.out.println("---MOOD PLAYLISTS---");
            System.out.println("Walk Like A Badass  ");
            System.out.println("Rage Beats  ");
            System.out.println("Arab Mood Booster  ");
            System.out.println("Sunday Stroll");
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    apply plugin: 'java'
    apply plugin: 'application'

    group 'advisor'
    version '1.0-SNAPSHOT'

    sourceCompatibility = 11
    mainClassName = 'advisor.Main'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile 'com.google.code.gson:gson:+'
    }

    jar {
        manifest {
            attributes 'Main-Class' : 'advisor.Main'
        }
        from {
            configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
        }
    }
  learner_created: false
- name: test/MusicAdvisorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.List;
    import java.util.function.Function;

    class Attach {
        Function<String, CheckResult> func;

        Attach(Function<String, CheckResult> func) {
            this.func = func;
        }
    }

    public class MusicAdvisorTest extends StageTest<Attach> {

        @Override
        public List<TestCase<Attach>> generate() {
            return List.of(
                new TestCase<Attach>()
                    .setInput("auth\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---SUCCESS---")) {
                            return new CheckResult(false,
                                "There is no \"---SUCCESS---\" after \"auth\" but should be");
                        }
                        if (!reply.contains("https://accounts.spotify.com/authorize?")) {
                            return new CheckResult(false,
                                "There is no link after \"auth\" but should be");
                        }
                        if (reply.contains("a19ee7dbfda443b2a8150c9101bfd645")) {
                            return new CheckResult(false,
                                    "You shouldn't use the client_id from the example!! " +
                                            "You should create your own id on the spotify site.");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("new\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("featured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.strip().startsWith("Please, provide access for application.")) {
                            return new CheckResult(false,
                                "When no access provided you should output " +
                                    "\"Please, provide access for application.\"");
                        }
                        return CheckResult.correct();
                    })),

                new TestCase<Attach>()
                    .setInput("auth\nnew\nfeatured\nexit")
                    .setAttach(new Attach(reply -> {
                        if (!reply.contains("---NEW RELEASES---")) {
                            return new CheckResult(false,
                                "When \"new\" was inputted there should be \"---NEW RELEASES---\" line");
                        }
                        if (!reply.contains("---FEATURED---")) {
                            return new CheckResult(false,
                                "When \"featured\" was inputted there should be \"---FEATURED---\" line");
                        }
                        return CheckResult.correct();
                    }))

            );
        }

        @Override
        public CheckResult check(String reply, Attach clue) {
            return clue.func.apply(reply);
        }
    }
  learner_created: false
- name: src/advisor/App.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5478#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 02 Dec 2021 23:46:50 UTC
record: 1
